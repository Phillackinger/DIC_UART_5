
DIC_21_01_2021_UART_5_TIMER_INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000258  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000258  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  000002ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008bb  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000774  00000000  00000000  00000c83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000392  00000000  00000000  000013f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  0000178c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000445  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000196  00000000  00000000  00001d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001eab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_13>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_20>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e8 e5       	ldi	r30, 0x58	; 88
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a3 30       	cpi	r26, 0x03	; 3
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  b2:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <init_ADC>:
unsigned char USART_Receive(void){
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
	/* Get and return received data from buffer */
	return UDR0;
}
  ba:	ec e7       	ldi	r30, 0x7C	; 124
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 66       	ori	r24, 0x60	; 96
  c2:	80 83       	st	Z, r24
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	87 6e       	ori	r24, 0xE7	; 231
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <init_UART>:
  d0:	87 e6       	ldi	r24, 0x67	; 103
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  dc:	e1 ec       	ldi	r30, 0xC1	; 193
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	80 83       	st	Z, r24
  e6:	80 81       	ld	r24, Z
  e8:	88 61       	ori	r24, 0x18	; 24
  ea:	80 83       	st	Z, r24
  ec:	e2 ec       	ldi	r30, 0xC2	; 194
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	86 60       	ori	r24, 0x06	; 6
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <USART_Transmit>:
  f8:	e0 ec       	ldi	r30, 0xC0	; 192
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	90 81       	ld	r25, Z
  fe:	95 ff       	sbrs	r25, 5
 100:	fd cf       	rjmp	.-6      	; 0xfc <USART_Transmit+0x4>
 102:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 106:	08 95       	ret

00000108 <startTimer1>:

void startTimer1(){
	TCCR1B |= (1<<CS10);
 108:	e1 e8       	ldi	r30, 0x81	; 129
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS11);	// Presc = 1024
 112:	80 81       	ld	r24, Z
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS12);
 118:	80 81       	ld	r24, Z
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	80 83       	st	Z, r24
 11e:	08 95       	ret

00000120 <stopTimer1>:
}

void stopTimer1(){
	TCCR1B &= ~(1<<CS10);
 120:	e1 e8       	ldi	r30, 0x81	; 129
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS11);	// Timer Deactivated
 12a:	80 81       	ld	r24, Z
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS12);
 130:	80 81       	ld	r24, Z
 132:	8b 7f       	andi	r24, 0xFB	; 251
 134:	80 83       	st	Z, r24
	
	TCNT1 = 0x0000;
 136:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 13a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 13e:	08 95       	ret

00000140 <init_TIMER1>:
}

void init_TIMER1(){
	TCCR1B |= (1<<WGM12);	// CTC-Mode (OCR1A)
 140:	e1 e8       	ldi	r30, 0x81	; 129
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	88 60       	ori	r24, 0x08	; 8
 148:	80 83       	st	Z, r24
	
	stopTimer1();
 14a:	0e 94 90 00 	call	0x120	; 0x120 <stopTimer1>
	
	OCR1A = 0x7A12;			// Compare Value
 14e:	82 e1       	ldi	r24, 0x12	; 18
 150:	9a e7       	ldi	r25, 0x7A	; 122
 152:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 156:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	TIMSK1 |= (1<<OCIE1A);	// Enable Compare Interrupt
 15a:	ef e6       	ldi	r30, 0x6F	; 111
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	82 60       	ori	r24, 0x02	; 2
 162:	80 83       	st	Z, r24
	sei();
 164:	78 94       	sei
 166:	08 95       	ret

00000168 <main>:
ISR(TIMER1_COMPA_vect);
ISR(USART0_RX_vect);

int main(void){
	
	init_ADC();
 168:	0e 94 5d 00 	call	0xba	; 0xba <init_ADC>
	init_UART();
 16c:	0e 94 68 00 	call	0xd0	; 0xd0 <init_UART>
	init_TIMER1();
 170:	0e 94 a0 00 	call	0x140	; 0x140 <init_TIMER1>
	
	while (1) while(endyet == 0) USART_Transmit(ADCH);
 174:	c9 e7       	ldi	r28, 0x79	; 121
 176:	d0 e0       	ldi	r29, 0x00	; 0
 178:	03 c0       	rjmp	.+6      	; 0x180 <main+0x18>
 17a:	88 81       	ld	r24, Y
 17c:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART_Transmit>
 180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 184:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 188:	89 2b       	or	r24, r25
 18a:	b9 f3       	breq	.-18     	; 0x17a <main+0x12>
 18c:	f9 cf       	rjmp	.-14     	; 0x180 <main+0x18>

0000018e <__vector_20>:
	OCR1A = 0x7A12;			// Compare Value
	TIMSK1 |= (1<<OCIE1A);	// Enable Compare Interrupt
	sei();
}

ISR(USART0_RX_vect){
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
	data = UDR0;
 1b0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 1b4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	if(data == 'g'){
 1b8:	87 36       	cpi	r24, 0x67	; 103
 1ba:	39 f4       	brne	.+14     	; 0x1ca <__vector_20+0x3c>
		endyet = 0;
 1bc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 1c0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		startTimer1();
 1c4:	0e 94 84 00 	call	0x108	; 0x108 <startTimer1>
 1c8:	0a c0       	rjmp	.+20     	; 0x1de <__vector_20+0x50>
	} else if(data == 's'){
 1ca:	83 37       	cpi	r24, 0x73	; 115
 1cc:	41 f4       	brne	.+16     	; 0x1de <__vector_20+0x50>
		endyet = 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 1d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		stopTimer1();
 1da:	0e 94 90 00 	call	0x120	; 0x120 <stopTimer1>
	}
}
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <__vector_13>:

ISR(TIMER1_COMPA_vect){
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	2f 93       	push	r18
 20c:	3f 93       	push	r19
 20e:	4f 93       	push	r20
 210:	5f 93       	push	r21
 212:	6f 93       	push	r22
 214:	7f 93       	push	r23
 216:	8f 93       	push	r24
 218:	9f 93       	push	r25
 21a:	af 93       	push	r26
 21c:	bf 93       	push	r27
 21e:	ef 93       	push	r30
 220:	ff 93       	push	r31
	endyet = 1;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 22a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	stopTimer1();
 22e:	0e 94 90 00 	call	0x120	; 0x120 <stopTimer1>
}
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
